# Copyright (c) Microsoft Corporation.
# Licensed under the MIT License.

# Use runtime parameters to define these selections in YML. This also makes them
# show up in the "Run" popup directly. This makes them much easier to set
# manually, vs. digging into the Variables submenu with many clicks.
# https://docs.microsoft.com/en-us/azure/devops/pipelines/process/runtime-parameters
parameters:
  - name: releaseVersion
    displayName: Version to release, including Microsoft revision suffix (-1) and boring/FIPS suffix (-fips) if they apply.
    type: string

  - name: releaseGoBuildId
    displayName: Build ID to release. Copy the ID from the build page's URL.
    type: string

  - name: releaseIssue
    displayName: microsoft/go issue number to comment on once complete, or nil.
    type: string
    default: 'nil'

  # Allow disabling specific parts. These can be used to re-run specific parts
  # of a release if necessary.
  - name: runTag
    displayName: Tag the release.
    type: boolean
    default: true
  - name: runGitHubRelease
    displayName: Create the GitHub Release.
    type: boolean
    default: true
  - name: runAkaMSUpdate
    displayName: Update the aka.ms URLs.
    type: boolean
    default: true

  # It seems like 'go-release-config' would be a good default value for this param. Instead, the
  # param has no default. This forces the queuer to explicitly pass a value, ensuring that if some
  # automation queues this pipeline but fails to set this param, this pipeline fails. If there were
  # a default, the pipeline would run a real release even if it should have been a mock release.
  # This also helps devs double-check intent if they manually queue this pipeline, but that's not
  # the main benefit of having no default.
  - name: goReleaseConfigVariableGroup
    displayName: '[Use "go-release-config" for a real release] Variable group that specifies release target locations and auth.'
    type: string

trigger: none
pr: none

variables:
  - group: go-akams-config
  - group: go-akams-auth
  - group: Microsoft-GoLang-bot
  # Import config group. This may direct the build to use secrets from the other groups.
  - group: ${{ parameters.goReleaseConfigVariableGroup }}

jobs:
  - job: Release
    workspace:
      clean: all
    pool:
      # This is a utility job: use generic recent LTS.
      name: NetCore1ESPool-Svc-Internal
      demands: ImageOverride -equals Build.Ubuntu.1804.Amd64
    variables:
      assetsDir: $(Pipeline.Workspace)/BuildAssets
      buildAssetJsonFile: $(assetsDir)/assets.json
      artifactsDir: $(Pipeline.Workspace)/Artifacts
      microsoftGoInternalPipeline: 958
    steps:
      - template: steps/checkout-unix-task.yml

      - template: steps/init-go.yml
      - task: UseDotNet@2
        displayName: 'Use .NET SDK'
        inputs:
          version: 6.x

      # Download build asset JSON
      - task: DownloadPipelineArtifact@2
        displayName: Download Build Asset JSON
        inputs:
          source: specific
          artifact: BuildAssets
          project: internal
          pipeline: $(microsoftGoInternalPipeline)
          runVersion: specific
          runId: ${{ parameters.releaseGoBuildId }}
          path: $(assetsDir)
      # Download built and signed binaries.
      - task: DownloadPipelineArtifact@2
        displayName: Download Binaries Signed
        inputs:
          source: specific
          artifact: Binaries Signed
          project: internal
          pipeline: $(microsoftGoInternalPipeline)
          runVersion: specific
          runId: ${{ parameters.releaseGoBuildId }}
          path: $(artifactsDir)
      
      - script: |
          go install ./cmd/releasego
          echo "##vso[task.prependpath]$(go env GOPATH)/bin"
        displayName: Install releasego

      - script: releasego check-limits -pat '$(GitHubPAT)'
        displayName: Check rate limit

      - script: |
          releasego get-asset-version \
            -build-asset-json '$(buildAssetJsonFile)' \
            -version '${{ parameters.releaseVersion }}' \
            -set-azdo-variable 'buildAssetVersion'
        displayName: Get and verify build asset version
      
      - script: |
          releasego get-build-info \
            -id '${{ parameters.releaseGoBuildId }}' \
            -org 'https://dev.azure.com/dnceng/' \
            -proj 'internal' \
            -prefix 'BuildInfo' \
            -azdopat '$(System.AccessToken)'
        displayName: Get build info

      - ${{ if eq(parameters.runTag, true) }}:
        - script: |
            releasego tag \
              -tag 'v$(buildAssetVersion)' \
              -commit '$(BuildInfoSourceVersion)' \
              -repo '$(TargetGitHubRepo)' \
              -pat '$(GitHubPAT)'
          displayName: Create tag

      - ${{ if eq(parameters.runGitHubRelease, true) }}:
        - script: |
            releasego repo-release \
              -tag 'v$(buildAssetVersion)' \
              -repo '$(TargetGitHubRepo)' \
              -build-asset-json '$(buildAssetJsonFile)' \
              -build-dir '$(artifactsDir)' \
              -pat '$(GitHubPAT)'
          displayName: Create release

      - ${{ if eq(parameters.runAkaMSUpdate, true) }}:
        - script: |
            # Pass owners through environment. (Contains semicolons.)
            export AkaMSOwners="$(AkaMSOwners)"

            go run ./cmd/releasego akams \
              -build-asset-json '$(buildAssetJsonFile)' \
              -prefix '$(VanityUrlPrefix)' \
              /p:AkaMSClientId='$(akams-client-id)' \
              /p:AkaMSClientSecret='$(akams-client-secret)' \
              /p:AkaMSTenant='$(AkaMSTenant)' \
              /p:AkaMSCreatedBy='$(AkaMSCreatedBy)' \
              /p:AkaMSGroupOwner='$(AkaMSGroupOwner)'
          displayName: Update aka.ms links

      - script: releasego check-limits -pat $(GitHubPAT)
        displayName: Check rate limit

      - ${{ if ne(parameters.releaseIssue, 'nil') }}:
        - script: |
            releasego report \
              -i '${{ parameters.releaseIssue }}' \
              -m ':white_check_mark: Successfully ran microsoft/go release steps for $(buildAssetVersion).' \
              -repo '$(TargetGitHubRepo)' \
              -pat '$(GitHubPAT)'
          displayName: Report Success
          condition: succeeded()
        - script: |
            releasego report \
              -i '${{ parameters.releaseIssue }}' \
              -m ':rotating_light: Failed to run microsoft/go release steps for $(buildAssetVersion).' \
              -repo '$(TargetGitHubRepo)' \
              -pat '$(GitHubPAT)'
          displayName: Report Failure
          condition: failed()

