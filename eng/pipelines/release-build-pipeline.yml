# Copyright (c) Microsoft Corporation.
# Licensed under the MIT License.

# For info about runtime parameters, see https://github.com/microsoft/go-infra/blob/main/docs/pipeline-yml-style.md#runtime-parameters
parameters:
  - name: releaseVersion
    displayName: Version to release, including Microsoft revision suffix (-1) and boring/FIPS suffix (-fips) if they apply.
    type: string

  - name: releaseIssue
    displayName: microsoft/go issue number to comment on once complete, or nil.
    type: string
    default: 'nil'

  # Allow retrying a build starting at any of these points.
  - name: poll1MicrosoftGoPRNumber
    displayName: '1: microsoft/go PR number to poll for merge.'
    type: string
    default: nil
  - name: poll2MicrosoftGoCommitHash
    displayName: '2: microsoft/go commit hash to poll for build.'
    type: string
    default: nil
  - name: poll3MicrosoftGoBuildID
    displayName: '3: internal build ID to poll for completion.'
    type: string
    default: nil
  - name: poll4MicrosoftGoImagesPRNumber
    displayName: '4: microsoft/go-images PR number to poll for merge.'
    type: string
    default: nil

  # Allow disabling specific parts of the internal build release. These can be used to re-run
  # specific parts of a release if necessary, e.g. if a step silently failed.
  - name: runInnerloop
    displayName: Trigger innerloop test pipeline
    type: boolean
    default: true
  - name: runCanary
    displayName: Trigger go-canary pipeline
    type: boolean
    default: true
  - name: runTag
    displayName: Tag the release.
    type: boolean
    default: true
  - name: runGitHubRelease
    displayName: Create the GitHub Release.
    type: boolean
    default: true
  - name: runAkaMSUpdate
    displayName: Update the aka.ms URLs.
    type: boolean
    default: true
  - name: runGoImagesUpdate
    displayName: Update the microsoft/go-images main branch and wait for PR completion.
    type: boolean
    default: true

  # This parameter intentionally has no default: see release-go-pipeline.yml
  - name: goReleaseConfigVariableGroup
    displayName: '[Use "go-release-config" for a real release] Variable group that specifies release target locations and auth.'
    type: string

trigger: none
pr: none

variables:
  - group: go-akams-config
  - group: go-akams-auth
  - group: Microsoft-GoLang-bot
  - group: DotNet-VSTS-Infra-Access
  # Import config group. This may direct the build to use secrets from the other groups.
  - group: ${{ parameters.goReleaseConfigVariableGroup }}
  - template: variables/release-pipelines.yml

resources:
  repositories:
    - repository: 1ESPipelineTemplates
      type: git
      name: 1ESPipelineTemplates/1ESPipelineTemplates
      ref: refs/tags/release

extends:
  template: v1/1ES.Official.PipelineTemplate.yml@1ESPipelineTemplates
  parameters:
    sdl:
      sourceAnalysisPool:
        name: NetCore1ESPool-Svc-Internal
        image: 1es-windows-2022
        os: windows
      suppression:
        suppressionFile: $(Build.SourcesDirectory)/.config/guardian/.gdnsuppress
      tsa:
        enabled: true
        configFile: $(Build.SourcesDirectory)/.config/tsa/tsaoptions.json

    stages:
      - stage: Release
        jobs:
          - template: /eng/pipelines/jobs/releasego.yml@self
            parameters:
              releaseVersion: ${{ parameters.releaseVersion }}
              releaseIssue: ${{ parameters.releaseIssue }}
              retryInstructionsFlags: '-checkboxes'
              variables:
                # Set a variable for each polling parameter. If a variable starts off with 'nil', it
                # will be overridden with a logging command as the pipeline moves on. Variables are
                # dynamic (unlike parameters) and the final state of the variables is checked at the
                # end of the build to provide a starting point for a retry if necessary.
                poll1MicrosoftGoPRNumber: ${{ parameters.poll1MicrosoftGoPRNumber }}
                poll2MicrosoftGoCommitHash: ${{ parameters.poll2MicrosoftGoCommitHash }}
                poll3MicrosoftGoBuildID: ${{ parameters.poll3MicrosoftGoBuildID }}
                poll4MicrosoftGoImagesPRNumber: ${{ parameters.poll4MicrosoftGoImagesPRNumber }}
              steps:
                # Resume the build at the furthest step based on the inputs. A fresh build has all
                # 'nil', and a retry build will have a non-nil value in one of these parameters.
                # Only the value of the last step's parameter matters. To avoid excessive, unclear
                # nesting, the nesting is all here in compact form, calling an evenly indented,
                # linear steps template.
                - ${{ if eq(parameters.poll4MicrosoftGoImagesPRNumber, 'nil') }}:
                  - ${{ if eq(parameters.poll3MicrosoftGoBuildID, 'nil') }}:
                    - ${{ if eq(parameters.poll2MicrosoftGoCommitHash, 'nil') }}:
                      - ${{ if eq(parameters.poll1MicrosoftGoPRNumber, 'nil') }}:
                        - template: /eng/pipelines/steps/release-build-steps.yml@self
                          parameters:
                            ${{ insert }}: ${{ parameters }}
                            emptyPollNumber: 1
                      - template: /eng/pipelines/steps/release-build-steps.yml@self
                        parameters:
                          ${{ insert }}: ${{ parameters }}
                          emptyPollNumber: 2
                    - template: /eng/pipelines/steps/release-build-steps.yml@self
                      parameters:
                        ${{ insert }}: ${{ parameters }}
                        emptyPollNumber: 3
                  - template: /eng/pipelines/steps/release-build-steps.yml@self
                    parameters:
                      ${{ insert }}: ${{ parameters }}
                      emptyPollNumber: 4
                - template: /eng/pipelines/steps/release-build-steps.yml@self
                  parameters:
                    ${{ insert }}: ${{ parameters }}
                    emptyPollNumber: -1
