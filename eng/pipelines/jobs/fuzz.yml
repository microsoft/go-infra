# Copyright (c) Microsoft Corporation.
# Licensed under the MIT License.

# Run fuzz tests using cmd/fuzzcrypto on the specified platform and pool.

parameters:
  name: ''
  pool: null
  # Platform, as it appears in the Microsoft Go pipeline artifact name: OS-Arch.
  platform: ''
  # Use the Microsoft Go toolset from a pipeline resource called "build", rather than official Go.
  useMicrosoftGo: true
  # The value of GOEXPERIMENT to use, or empty string.
  goExperiment: ''
  # Fuzz time per job. The default is specified in minutes so it's easy to compare against the other
  # times, which AzDO only accepts as minutes.
  fuzztime: 180m
  # Fuzz pipeline step timeout in minutes. Set this a little higher than fuzztime but a little lower
  # than job timeout to make sure we get a chance to upload testdata even if the fuzz command
  # doesn't stop when it should.
  fuzzTimeoutMinutes: 200
  jobTimeoutMinutes: 220
  # The list of runner IDs: sequential numbers starting from 0. The number of elements determines
  # the number of runner jobs to start in parallel. We would use "range" here if it existed.
  runnerIDs: [1, 2, 3]

jobs:
  - ${{ each id in parameters.runnerIDs }}:
    - job: ${{ parameters.name }}_${{ id }}
      displayName: ${{ parameters.name }} ${{ id }}
      pool: ${{ parameters.pool }}
      timeoutInMinutes: ${{ parameters.jobTimeoutMinutes }}

      workspace:
        clean: all

      variables:
        bucketArgs: -bucket ${{ id }}/${{ length(parameters.runnerIDs) }}

      templateContext:
        outputs:
          - output: pipelineArtifact
            path: $(Build.SourcesDirectory)/cmd/fuzzcrypto
            artifact: ${{ parameters.name }} ${{ id }} testdata
            condition: failed()

      steps:
        - checkout: self
          submodules: true
          fetchDepth: 1

        - ${{ if eq(parameters.useMicrosoftGo, true) }}:
          - template: ../steps/init-microsoft-go.yml
            parameters:
              platform: ${{ parameters.platform }}

          - script: |
              go env
              go run . -v -fuzztime ${{ parameters.fuzztime }} $(bucketArgs)
            displayName: Fuzz
            workingDirectory: $(Build.SourcesDirectory)/cmd/fuzzcrypto
            env:
              GOEXPERIMENT: ${{ parameters.goExperiment }}
            timeoutInMinutes: ${{ parameters.fuzzTimeoutMinutes }}

        - ${{ else }}:
          # Test with ordinary Go.
          - template: ../steps/init-go.yml
          - script: |
              cd cmd/fuzzcrypto
              go run . -v -fuzztime ${{ parameters.fuzztime }}
            displayName: Fuzz
