# Copyright (c) Microsoft Corporation.
# Licensed under the MIT License.

parameters:
  # The number of the pollX{...} variable that is empty (nil) at this point in the build and should
  # be filled in. -1 indicates that no more retryable polls remain, only finishing touches.
  emptyPollNumber: unspecified

steps:
  - ${{ if eq(parameters.emptyPollNumber, 1) }}:

    # Poll for the right commit to use for this release.
    - script: |
        releasego get-upstream-commit \
          -version '${{ parameters.releaseVersion }}' \
          -set-azdo-variable upstreamReleasedCommit
      displayName: âŒš Get upstream commit for release
      # 6 hours. This step may take an arbitrarily long time while if we ran the release
      # job preemptively. But at some point, a dev needs to check that the tool is working
      # properly and the upstream release is progressing as expected.
      timeoutInMinutes: 360
    # Either make sure the microsoft/go branch has the correct commit as its submodule, or
    # submit a PR that sets the submodule commit.
    - script: |
        releasego sync \
          -c '$(ReleaseSyncConfigPath)' \
          -commit '$(upstreamReleasedCommit)' \
          -version '${{ parameters.releaseVersion }}' \
          -git-auth pat \
          -github-user '$(GitHubUser)' \
          -github-pat '$(GitHubPAT)' \
          -github-pat-reviewer '$(GitHubPATReviewer)' \
          -azdo-dnceng-pat '$(AzDODncengPAT)' \
          -create-branches \
          -set-azdo-variable-pr-number poll1MicrosoftGoPRNumber \
          -set-azdo-variable-up-to-date-commit poll2MicrosoftGoCommitHash
      displayName: Sync to upstream commit

  - ${{ elseif eq(parameters.emptyPollNumber, 2) }}:

    # Now we have poll1MicrosoftGoPRNumber, but it may be nil if no PR is required.
    - script: |
        releasego get-merged-pr-commit \
          -repo '$(TargetGitHubRepo)' \
          -pr '$(poll1MicrosoftGoPRNumber)' \
          -github-pat '$(GitHubPAT)' \
          -set-azdo-variable poll2MicrosoftGoCommitHash
      displayName: âŒš Get sync PR merged commit hash
      timeoutInMinutes: 90
      # If no PR is required, then poll2MicrosoftGoCommitHash is already set and we can move on.
      condition: and(succeeded(), ne(variables.poll1MicrosoftGoPRNumber, 'nil'))

  - ${{ elseif eq(parameters.emptyPollNumber, 3) }}:

    # Now we have poll2MicrosoftGoCommitHash
    - script: |
        releasego wait-azdo-commit \
          -commit '$(poll2MicrosoftGoCommitHash)' \
          -name '$(TargetAzDORepo)' \
          -org 'https://dev.azure.com/dnceng/' \
          -proj 'internal' \
          -azdopat '$(System.AccessToken)'
      displayName: âŒš Wait for internal mirror
      timeoutInMinutes: 16 # See https://github.com/microsoft/go-lab/issues/124

    # When queueing a build, AzDO requires the given Commit is reachable from Branch, and the
    # default Branch is "microsoft/main". So, we need to figure out the release branch name
    # and save it as a variable to pass it to AzDO.
    #
    # Testing adds a complication: testing commits won't be found in the actual release
    # branches, so we need a way to override. This is done using BuildPipelineFullBranchName
    # from the variable group. For actual releases, it should have the value
    # "refs/heads/microsoft/$(UpstreamTargetBranchName)". But in a testing variable group, it
    # can point at any ordinary dev branch that has the sync commit.
    - script: |
        releasego get-target-branch \
          -version '${{ parameters.releaseVersion }}' \
          -set-azdo-variable-branch-name UpstreamTargetBranchName
      displayName: Get target branch containing commit

    - script: |
        releasego build-pipeline \
          -commit '$(poll2MicrosoftGoCommitHash)' \
          -branch '$(BuildPipelineFullBranchName)' \
          -id '$(GoPipelineID)' \
          -org 'https://dev.azure.com/dnceng/' \
          -proj 'internal' \
          -azdopat '$(System.AccessToken)' \
          -set-azdo-variable poll3MicrosoftGoBuildID \
          p releaseVersion '${{ parameters.releaseVersion }}' \
          pOptional publishReleaseStudio true
      displayName: ðŸš€ Run microsoft/go internal build

    - template: ../steps/report.yml
      parameters:
        releaseIssue: ${{ parameters.releaseIssue }}
        version: ${{ parameters.releaseVersion }}
        condition: succeeded()
        buildPipeline: microsoft-go
        buildID: $(poll3MicrosoftGoBuildID)
        buildStatus: '?'
        start: true
        reason: queued build

    # Above, we launched the official build. Now launch innerloop tests. We actually
    # don't poll this build here: it's a release pipeline, so it reports its own
    # status to the release issue. This also means it runs in parallel.
    - script: |
        releasego build-pipeline \
          -id '$(GoReleaseInnerloopPipelineID)' \
          -org 'https://dev.azure.com/dnceng/' \
          -proj 'internal' \
          -branch '$(Build.SourceBranch)' \
          -azdopat '$(System.AccessToken)' \
          -set-azdo-variable MicrosoftGoReleaseInnerloopBuildID \
          p releaseVersion '${{ parameters.releaseVersion }}' \
          p releaseIssue '${{ parameters.releaseIssue }}' \
          p microsoftGoCommitHash '$(poll2MicrosoftGoCommitHash)' \
          p goReleaseConfigVariableGroup '${{ parameters.goReleaseConfigVariableGroup }}'
      displayName: ðŸš€ Start microsoft-go-infra-release-innerloop

    - template: ../steps/report.yml
      parameters:
        releaseIssue: ${{ parameters.releaseIssue }}
        version: ${{ parameters.releaseVersion }}
        condition: succeeded()
        buildPipeline: microsoft-go-infra-release-innerloop
        buildID: $(MicrosoftGoReleaseInnerloopBuildID)
        buildStatus: '?'
        start: true
        reason: queued build

  - ${{ elseif eq(parameters.emptyPollNumber, 4) }}:

    # Now we have poll3MicrosoftGoBuildID
    - script: |
        releasego wait-build \
          -id '$(poll3MicrosoftGoBuildID)' \
          -org 'https://dev.azure.com/dnceng/' \
          -proj 'internal' \
          -azdopat '$(System.AccessToken)'
      displayName: âŒš Wait for internal build
      timeoutInMinutes: 180

    - template: ../steps/report.yml
      parameters:
        releaseIssue: ${{ parameters.releaseIssue }}
        version: ${{ parameters.releaseVersion }}
        condition: succeeded()
        buildPipeline: microsoft-go
        buildID: $(poll3MicrosoftGoBuildID)
        buildStatus: Succeeded
        reason: completed internal build

    # Download build asset JSON from completed internal build to update go-images with.
    - task: DownloadPipelineArtifact@2
      displayName: Download Build Asset JSON
      inputs:
        source: specific
        artifact: BuildAssets
        project: internal
        pipeline: $(GoPipelineID)
        runVersion: specific
        runId: $(poll3MicrosoftGoBuildID)
        path: $(assetsDir)

    # Download built and signed binaries. These are already on blob storage, but steps in this
    # pipeline will publish a subset of these as GitHub Release attachments.
    - ${{ if eq(parameters.runGitHubRelease, true) }}:
      - task: DownloadPipelineArtifact@2
        displayName: Download binaries
        inputs:
          source: specific
          artifact: Binaries Signed
          project: internal
          pipeline: $(GoPipelineID)
          runVersion: specific
          runId: $(poll3MicrosoftGoBuildID)
          path: $(artifactsDir)

    - script: |
        releasego get-asset-version \
          -build-asset-json '$(buildAssetJsonFile)' \
          -version '${{ parameters.releaseVersion }}' \
          -set-azdo-variable 'buildAssetVersion'
      displayName: Read and verify build asset version

    - script: |
        releasego get-build-info \
          -id '$(poll3MicrosoftGoBuildID)' \
          -org 'https://dev.azure.com/dnceng/' \
          -proj 'internal' \
          -prefix 'BuildInfo' \
          -azdopat '$(System.AccessToken)'
      displayName: Get build info

    - ${{ if eq(parameters.runTag, true) }}:
      - script: |
          releasego tag \
            -tag 'v$(buildAssetVersion)' \
            -commit '$(BuildInfoSourceVersion)' \
            -repo '$(TargetGitHubRepo)' \
            -github-pat '$(GitHubPAT)'
        displayName: ðŸŽ“ Create GitHub tag

    - ${{ if eq(parameters.runGitHubRelease, true) }}:
      - script: |
          releasego repo-release \
            -tag 'v$(buildAssetVersion)' \
            -repo '$(TargetGitHubRepo)' \
            -build-asset-json '$(buildAssetJsonFile)' \
            -build-dir '$(artifactsDir)' \
            -github-pat '$(GitHubPAT)'
        displayName: ðŸŽ“ Create GitHub release

    - ${{ if eq(parameters.runAkaMSUpdate, true) }}:
      - task: AzureCLI@2
        displayName: ðŸŽ“ Update aka.ms links
        inputs:
          azureSubscription: 'DotNet-Engineering-Services_KeyVault'
          scriptType: 'bash'
          scriptLocation: 'inlineScript'
          inlineScript: |
            # Get Azure Key Vault's JSON cert wrapper as an intermediate file in temp.
            # Based on Arcade: https://github.com/dotnet/arcade/blob/7507f80c8db285bbc9939c1dff522a761cf4edc0/eng/publishing/v3/publish.yml#L125-L132
            az keyvault secret show --vault-name EngKeyVault --name Redirection-UST-Client-NetCoreDeployment > $(Agent.TempDirectory)/akamsclientcert.json

            # Pass the manifest file path only if a file exists there. It is only
            # present if the assets.json file was published via Release Studio.
            manifestFile=
            if [ -f "$(publishManifestFile)" ]; then
              manifestFile="$(publishManifestFile)"
            fi

            releasego akams \
              -build-asset-json '$(buildAssetJsonFile)' \
              -build-asset-json-publish-manifest="$manifestFile" \
              -prefix '$(VanityUrlPrefix)' \
              -clientID '$(akams-client-id)' \
              -clientCertVaultFile '$(Agent.TempDirectory)/akamsclientcert.json' \
              -tenant '$(AkaMSTenant)' \
              -createdBy '$(AkaMSCreatedBy)' \
              -groupOwner '$(AkaMSGroupOwner)' \
              -owners '$(AkaMSOwners)'

    - ${{ if eq(parameters.runGoImagesUpdate, true) }}:
      # Update the target Docker repo. The origin is defined with "_" as the username because
      # the username doesn't matter, only the PAT. $(GitHubPAT) may be some other user's: it is
      # provided by the variable group.
      - script: |
          set -euxo pipefail
          # Install jq, used to evaluate Dockerfile templates.
          sudo apt update && sudo apt install -y jq

          go run ./cmd/dockerupdatepr \
            -origin 'https://_:$(GitHubPAT)@github.com/$(TargetGoImagesGitHubRepo)' \
            -github-pat '$(GitHubPAT)' \
            -github-pat-reviewer '$(GitHubPATReviewer)' \
            -build-asset-json '$(buildAssetJsonFile)' \
            -manual-branch '$(TargetGoImagesBranch)' \
            -set-azdo-variable-pr-number poll4MicrosoftGoImagesPRNumber
        displayName: Update go-images

  - ${{ elseif eq(parameters.emptyPollNumber, -1) }}:

    - ${{ if eq(parameters.runGoImagesUpdate, true) }}:
      # Now we have poll4MicrosoftGoImagesPRNumber, which may be nil if no PR is required
      - script: |
          releasego get-merged-pr-commit \
            -repo '$(TargetGoImagesGitHubRepo)' \
            -pr '$(poll4MicrosoftGoImagesPRNumber)' \
            -github-pat '$(GitHubPAT)'
        displayName: âŒš Wait for go-images update PR merge
        timeoutInMinutes: 120
        # Skip this task if the PR number isn't set. This might intentionally happen if we have to
        # release a new binary/source revision of an out-of-support version of Go, and we don't
        # still support Docker images for that version.
        condition: and(succeeded(), ne(variables.poll4MicrosoftGoImagesPRNumber, 'nil'))

  - ${{ else }}:
    - "Invalid emptyPollNumber ${{ parameters.emptyPollNumber }}": error
